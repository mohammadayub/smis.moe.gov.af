// <auto-generated />
using System;
using App.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace App.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Clean.Domain.Entity.au.Audit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("DbContextObject")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("DbObjectName")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("OperationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("OperationTypeId")
                        .HasColumnName("OperationTypeID")
                        .HasColumnType("integer");

                    b.Property<string>("RecordId")
                        .HasColumnName("RecordID")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<int?>("UserId")
                        .HasColumnName("UserID")
                        .HasColumnType("integer");

                    b.Property<string>("ValueAfter")
                        .HasColumnType("character varying");

                    b.Property<string>("ValueBefore")
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.HasIndex("OperationTypeId");

                    b.ToTable("Audit","au");
                });

            modelBuilder.Entity("Clean.Domain.Entity.au.OperationType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("integer");

                    b.Property<string>("OperationTypeName")
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.ToTable("OperationType","au");
                });

            modelBuilder.Entity("Clean.Domain.Entity.doc.DocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("Category")
                        .HasColumnType("character varying");

                    b.Property<string>("Description")
                        .HasColumnType("character varying");

                    b.Property<string>("Name")
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.ToTable("DocumentType","doc");
                });

            modelBuilder.Entity("Clean.Domain.Entity.doc.Documents", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.Property<DateTime?>("DocumentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DocumentNumber")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("DocumentSource")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<int>("DocumentTypeId")
                        .HasColumnName("DocumentTypeID")
                        .HasColumnType("integer");

                    b.Property<string>("EncryptionKey")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("LastDownloadDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ObjectName")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ObjectSchema")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.Property<long>("RecordId")
                        .HasColumnName("RecordID")
                        .HasColumnType("bigint");

                    b.Property<string>("Root")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<int?>("ScreenId")
                        .HasColumnName("ScreenID")
                        .HasColumnType("integer");

                    b.Property<int?>("StatusId")
                        .HasColumnName("StatusID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DocumentTypeId");

                    b.ToTable("Documents","doc");
                });

            modelBuilder.Entity("Clean.Domain.Entity.doc.ScreenDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<int?>("DocumentTypeId")
                        .HasColumnName("DocumentTypeID")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int?>("ScreenId")
                        .HasColumnName("ScreenID")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("ScreenId");

                    b.ToTable("ScreenDocument","doc");
                });

            modelBuilder.Entity("Clean.Domain.Entity.look.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<int?>("Sorter")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Module","Look");
                });

            modelBuilder.Entity("Clean.Domain.Entity.look.RoleScreen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int>("ScreenId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ScreenId");

                    b.ToTable("RoleScreen");
                });

            modelBuilder.Entity("Clean.Domain.Entity.look.Screen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<string>("DirectoryPath")
                        .IsRequired()
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<int>("ModuleId")
                        .HasColumnName("ModuleID")
                        .HasColumnType("integer");

                    b.Property<int?>("ParentId")
                        .HasColumnName("ParentID")
                        .HasColumnType("integer");

                    b.Property<int>("Sorter")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.HasIndex("ParentId");

                    b.ToTable("Screen","Look");
                });

            modelBuilder.Entity("Clean.Domain.Entity.look.SystemStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Sorter")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("StatusType")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<int>("TypeId")
                        .HasColumnName("TypeID")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("SystemStatus","Look");
                });

            modelBuilder.Entity("Clean.Domain.Entity.prc.Process", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("Description")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<int?>("ScreenId")
                        .HasColumnName("ScreenID")
                        .HasColumnType("integer");

                    b.Property<string>("Sorter")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("ScreenId");

                    b.ToTable("Process","prc");
                });

            modelBuilder.Entity("Clean.Domain.Entity.prc.ProcessConnection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<int>("ConnectedTo")
                        .HasColumnType("integer");

                    b.Property<int>("ProcessId")
                        .HasColumnName("ProcessID")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ConnectedTo");

                    b.HasIndex("ProcessId");

                    b.ToTable("ProcessConnection","prc");
                });

            modelBuilder.Entity("Clean.Domain.Entity.prc.ProcessTracking", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ModuleId")
                        .HasColumnName("ModuleID")
                        .HasColumnType("integer");

                    b.Property<int>("ProcessId")
                        .HasColumnName("ProcessID")
                        .HasColumnType("integer");

                    b.Property<long>("RecordId")
                        .HasColumnName("RecordID")
                        .HasColumnType("bigint");

                    b.Property<int>("ReferedProcessId")
                        .HasColumnName("ReferedProcessID")
                        .HasColumnType("integer");

                    b.Property<string>("Remarks")
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.Property<int>("StatusId")
                        .HasColumnName("StatusID")
                        .HasColumnType("integer");

                    b.Property<string>("ToUserId")
                        .HasColumnName("ToUserID")
                        .HasColumnType("character varying");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("UserID")
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.HasIndex("ProcessId");

                    b.HasIndex("ReferedProcessId");

                    b.ToTable("ProcessTracking","prc");
                });

            modelBuilder.Entity("Clean.Domain.Entity.au.Audit", b =>
                {
                    b.HasOne("Clean.Domain.Entity.au.OperationType", "OperationType")
                        .WithMany("Audit")
                        .HasForeignKey("OperationTypeId")
                        .HasConstraintName("audit_fk");
                });

            modelBuilder.Entity("Clean.Domain.Entity.doc.Documents", b =>
                {
                    b.HasOne("Clean.Domain.Entity.doc.DocumentType", "DocumentType")
                        .WithMany("Documents")
                        .HasForeignKey("DocumentTypeId")
                        .HasConstraintName("_Documents__FK")
                        .IsRequired();
                });

            modelBuilder.Entity("Clean.Domain.Entity.doc.ScreenDocument", b =>
                {
                    b.HasOne("Clean.Domain.Entity.doc.DocumentType", "DocumentType")
                        .WithMany("ScreenDocument")
                        .HasForeignKey("DocumentTypeId")
                        .HasConstraintName("_ScreenDocument__FK");

                    b.HasOne("Clean.Domain.Entity.look.Screen", "Screen")
                        .WithMany("ScreenDocument")
                        .HasForeignKey("ScreenId")
                        .HasConstraintName("_ScreenDocument__FK_1");
                });

            modelBuilder.Entity("Clean.Domain.Entity.look.RoleScreen", b =>
                {
                    b.HasOne("Clean.Domain.Entity.look.Screen", "Screen")
                        .WithMany("RoleScreen")
                        .HasForeignKey("ScreenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Clean.Domain.Entity.look.Screen", b =>
                {
                    b.HasOne("Clean.Domain.Entity.look.Module", "Module")
                        .WithMany("Screen")
                        .HasForeignKey("ModuleId")
                        .HasConstraintName("screen_fk")
                        .IsRequired();

                    b.HasOne("Clean.Domain.Entity.look.Screen", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("screen_parent_fk");
                });

            modelBuilder.Entity("Clean.Domain.Entity.prc.Process", b =>
                {
                    b.HasOne("Clean.Domain.Entity.look.Screen", "Screen")
                        .WithMany("Process")
                        .HasForeignKey("ScreenId")
                        .HasConstraintName("_Process__FK");
                });

            modelBuilder.Entity("Clean.Domain.Entity.prc.ProcessConnection", b =>
                {
                    b.HasOne("Clean.Domain.Entity.prc.Process", "ConnectedToNavigation")
                        .WithMany("ProcessConnectionConnectedToNavigation")
                        .HasForeignKey("ConnectedTo")
                        .HasConstraintName("_ProcessConnection__FK_1")
                        .IsRequired();

                    b.HasOne("Clean.Domain.Entity.prc.Process", "Process")
                        .WithMany("ProcessConnectionProcess")
                        .HasForeignKey("ProcessId")
                        .HasConstraintName("_ProcessConnection__FK")
                        .IsRequired();
                });

            modelBuilder.Entity("Clean.Domain.Entity.prc.ProcessTracking", b =>
                {
                    b.HasOne("Clean.Domain.Entity.look.Module", "Module")
                        .WithMany("ProcessTracking")
                        .HasForeignKey("ModuleId")
                        .HasConstraintName("_ProcessTracking__FK_2")
                        .IsRequired();

                    b.HasOne("Clean.Domain.Entity.prc.Process", "Process")
                        .WithMany("ProcessTrackingProcess")
                        .HasForeignKey("ProcessId")
                        .HasConstraintName("_ProcessTracking__FK")
                        .IsRequired();

                    b.HasOne("Clean.Domain.Entity.prc.Process", "ReferedProcess")
                        .WithMany("ProcessTrackingReferedProcess")
                        .HasForeignKey("ReferedProcessId")
                        .HasConstraintName("_ProcessTracking__FK_1")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
